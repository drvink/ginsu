.TH ginsu 1 "" "" "Gale Chat Client"
.SH NAME
ginsu \- gale chat system client
.SH SYNOPSIS

Usage: ginsu [OPTION...] categories...
  -v  --verbose          verbose output to errorlog, -vv for debugging info too.
  -V  --version          print version information
  -s  --sample           print sample configuration file to stdout
  -m  --man              print all internal help screens to stdout
  -e  --justargs         only subscribe to command line arguments
  -P                     do not write to pufflog
      --help             show this help screen
      --nopufflog        do not read or write pufflog
      --errorlog=FILE    log errors to file
      --testCurses       print curses diagnostics
      --dumpKey=KEYFILE  print info for keyfile
      --checkconfig      check and print out configuration

To get started, generate a configuration file using the following command:
   mkdir ~/.gale ; ginsu -s > ~/.gale/ginsu.config
Edit the configuration file and run ginsu!

The homepage is at: <http://repetae.net/john/computer/ginsu/>


.SH DESCRIPTION
.BR "ginsu"
is a client for the 
.BR "gale chat system"
which can be learned about at 
.BR "<http://gale.org/>"

To get started, generate a configuration file using the following command:

.BR "mkdir ~/.gale ; ginsu -s > ~/.gale/ginsu.config"

Edit the configuration file and run ginsu. You may use F1 for help while running ginsu.

If you have problems, ginsu --checkconfig will print out ginsu's current configuration settings.
.SH USING GINSU


            Keys:    
             <F1>    Help Screen
             <F2>    Main Screen
             <F3>    Presence Status Screen
                     
                j    next puff
                k    previous puff
           <Home>    first puff
            <End>    last puff
    <Enter> <C-E>    forward one line
<BackSpace> <C-Y>    back one line
   <C-F> <PgDown>    forward one page
     <C-B> <PgUp>    back one page
            <C-D>    forward one half-page
            <C-U>    back one half-page
                     
                d    Show puff details
                     
              c ~    add new filter
                u    pop one filter
                U    pop all filters
                !    invert filter at top of stack
                x    swap top two filters on stack
                a    filter to current author
                t    filter to current thread
                T    filter to strict thread
           m[1-9]    set mark - save current filter stack at given key
            [1-9]    recall filter stack saved here with 'm'
           C[1-9]    recall filter stack and add it to current filter stack
                     
            <C-O>    toggle Rot13 body filter
                     
                f    follow-up to category
                p    compose new puff
                r    reply to author
                g    group reply, sends to recipients and author of puff
                N    modify public presence string
                     
            <C-R>    reconnect to all servers
                E    edit and reload configuration file
              q Q    quit program
            <C-L>    redraw screen

Filters:
    Filters are implemented as Boolean expressions. The building blocks
    are primitives which usually begin with ~ and are combined with
    semicolon for disjunction, space for conjunction, exclamation point
    for negation and parenthesis for grouping. The current filter stack
    is displayed on the bottom line of the screen when it is nonempty,
    the filters on the stack are conjoined together to determine which
    puffs are visible

Primitive Filters:    
                ~a    author
                ~c    category
                ~i    case insensitive substring search
                ~k    keyword
                ~s    puffers real name
         (default)    substring search

Filter Examples:
    (~a:john@ugcs.caltech.edu) - all puffs by john@ugcs
    (~c:pub.tv.buffy ~a:jtr@ofb.net) - puffs from jtr and to pub.tv.buffy
    (ginsu ; ~c:pub.gale.ginsu) - puffs containing the word ginsu or directed to pub.gale.ginsu
    (!~k:spoil) - no spoilers
    (~c:pub.tv.buffy !~c:pub.meow) - puffs to buffy which are not about cats


.SH ENVIRONMENT
configuration variables are first looked for in the environment. In general, for
configuration variable FOO, the following places will be checked in order:
 GINSU_FOO in the environment
 FOO in the config file
 FOO in the environment
 
.SH FILES
.TP
.BR "~/.gale/ginsu.config"
this is the main configuration file
.TP
.BR "~/.gale/ginsu.pufflog"
where puffs are stored between invocations
.TP
.BR "~/.gale/ginsu.errorlog"
errors are logged here, useful when submitting a bug report
.TP
.BR "~/.gale/auth/private/*"
this is where ginsu looks for your private key for decoding incoming encrypted messages.
.SH BUGS
To report a bug go to 
.BR "<http://bugs.ofb.net/cgi-bin/bugzilla/enter_bug.cgi?product=Ginsu>"
When reporting a bug, include the last few lines of 
.BR "~/.gale/ginsu.errorlog"
if it seems appropriate as well as the output from
.BR "ginsu --checkconfig"

.SH AUTHOR
ginsu was written by John Meacham. 
The homepage is at 
.BR "<http://repetae.net/john/computer/ginsu/>"


.SH "SEE ALSO"
.BR "<http://gale.org/>"
